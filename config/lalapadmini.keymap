#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_R_LAYER 300>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer SCROLL_L_LAYER 300>;
        //<&zip_temp_layer MOUSE_L_LAYER 300>;

    lowspeedmode {
        layers = <TERTIARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

&mt { quick-tap-ms = <200>; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tap_dance_layer_1and2: tap_dance_layer_1and2 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mo12";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO_En {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <32 33>;
        };

        COMBO_Jn {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <34 35>;
        };
    };

    macros {
        MACRO_LTAP: MACRO_LTAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>;
            label = "MACRO_LTAP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&scroll_up_down>;

            bindings = <
&kp Q      &kp W           &kp E  &kp R      &kp T         &kp Y            &kp U      &kp I      &kp O            &kp P
&kp A      &kp S           &kp D  &kp F      &kp G         &kp H            &kp J      &kp K      &kp L            &kp MINUS
&kp Z      &kp X           &kp C  &kp V      &kp B         &kp N            &kp M      &kp COMMA  &lt 4 PERIOD     &kp QUESTION
&kp LCTRL  &kp LEFT_SHIFT         &kp SPACE  &lt 1 DELETE  &lt 2 BACKSPACE  &kp ENTER             &lt 5 RIGHT_WIN  &lt 8 ESCAPE
            >;
        };

        SECONDARY_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_right_left>, <&scroll_right_left>;

            bindings = <
&bt BT_SEL 0  &kp F1        &kp F2   &kp F3   &kp F4   &kp N7        &kp N8          &kp N9        &kp JP_PLUS      &kp MINUS
&bt BT_SEL 1  &kp F5        &kp F6   &kp F7   &kp F8   &kp NUMBER_4  &kp N5          &kp NUMBER_6  &kp JP_ASTERISK  &kp SLASH
&bt BT_SEL 2  &kp F9        &kp F10  &kp F11  &kp F12  &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3  &kp PERIOD       &kp N0
&bt BT_SEL 3  &bt BT_SEL 4           &trans   &trans   &trans        &bt BT_CLR_ALL                &kp JP_EQUAL     &trans
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&kp JP_AT   &kp JP_LBRACE  &kp JP_RBRACE  &kp JP_LPAREN    &kp JP_RPAREN     &kp JP_CARET  &kp EXCLAMATION   &kp JP_PIPE     &kp JP_BACKQUOTE  &trans
&kp HASH    &kp JP_QUOTE   &kp JP_DQUOTE  &kp JP_LBRACKET  &kp JP_RBRACKET   &kp PERCENT   &kp JP_AMPERSAND  &kp JP_TILDE    &kp UP_ARROW      &kp JP_UNDERSCORE
&kp DOLLAR  &kp JP_COLON   &kp SEMICOLON  &kp LESS_THAN    &kp GREATER_THAN  &kp SLASH     &kp JP_YEN        &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW
&trans      &trans                        &bt BT_CLR       &trans            &trans        &trans                            &kp TAB           &kp RIGHT_ALT
            >;

            sensor-bindings = <&scroll_right_left>, <&scroll_right_left>;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&volume_up_down>, <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans       &trans      &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3
&trans  &trans  &trans  &bootloader  &sys_reset  &sys_reset    &bootloader   &bt BT_CLR    &bt BT_CLR_ALL  &trans
&trans  &trans  &trans  &trans       &trans      &trans        &trans        &trans        &trans          &trans
&trans  &trans          &trans       &trans      &trans        &trans                      &trans          &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans    &trans    &trans
&mkp MB4  &mkp MB3  &mkp MB5  &trans  &trans  &trans  &trans  &mkp MB4  &mkp MB3  &mkp MB5
&mkp MB1  &trans    &mkp MB2  &trans  &trans  &trans  &trans  &mkp MB1  &trans    &mkp MB2
&trans    &mo 7               &trans  &trans  &trans  &trans            &mo 5     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans    &trans    &trans
&mkp MB4  &mkp MB3  &mkp MB5  &trans  &trans  &trans  &trans  &mkp MB4  &mkp MB3  &mkp MB5
&mkp MB1  &trans    &mkp MB2  &trans  &trans  &trans  &trans  &mkp MB1  &trans    &mkp MB2
&trans    &mo 7               &trans  &trans  &trans  &trans            &mo 5     &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        US_JS {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&tog 9  &tog 0          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        US {
            bindings = <
&kp Q      &kp W      &kp E  &kp R      &kp T          &kp Y             &kp U    &kp I      &kp O           &kp P
&kp A      &kp S      &kp D  &kp F      &kp G          &kp H             &kp J    &kp K      &kp L           &kp MINUS
&kp Z      &kp X      &kp C  &kp V      &kp B          &kp N             &kp M    &kp COMMA  &lt 4 PERIOD    &kp QUESTION
&kp LCTRL  &kp LSHFT         &kp SPACE  &lt 10 DELETE  &lt 11 BACKSPACE  &kp RET             &lt 5 LEFT_WIN  &lt 8 ESCAPE
            >;

            sensor-bindings = <&scroll_down_up>;
        };

        US_sugi {
            bindings = <
&bt BT_SEL 0  &kp F1        &kp F2   &kp F3   &kp F4   &kp N7  &kp N8          &kp N9  &kp PLUS      &kp MINUS
&bt BT_SEL 1  &kp F5        &kp F6   &kp F7   &kp F8   &kp N4  &kp N5          &kp N6  &kp ASTERISK  &kp SLASH
&bt BT_SEL 2  &kp F9        &kp F10  &kp F11  &kp F12  &kp N1  &kp N2          &kp N3  &kp DOT       &kp N0
&bt BT_SEL 3  &bt BT_SEL 4           &trans   &trans   &trans  &bt BT_CLR_ALL          &kp EQUAL     &trans
            >;

            sensor-bindings = <&scroll_right_left>;
        };

        US_kigo {
            bindings = <
&kp AT_SIGN  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET    &kp EXCLAMATION  &kp PIPE        &kp GRAVE       &trans
&kp HASH     &kp SQT         &kp DOUBLE_QUOTES  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT  &kp AMPERSAND    &kp TILDE       &kp UP_ARROW    &kp UNDERSCORE
&kp DOLLAR   &kp COLON       &kp SEMICOLON      &kp LESS_THAN         &kp GREATER_THAN       &kp SLASH    &kp BSLH         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT
&trans       &trans                             &bt BT_CLR            &trans                 &trans       &trans                           &kp TAB         &kp RIGHT_ALT
            >;

            sensor-bindings = <&scroll_right_left>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
